/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
    // Time Complexity --> O(1), because generally we do all the majority of insertion in Constructor
    // Space complexiity --> O(h), H is height of the tree
public:
    stack<TreeNode*> s;
    void DFS(TreeNode * root){
        while(root != NULL){
             s.push(root);
             root = root ->left;
        }
    }
    BSTIterator(TreeNode* root) {
        DFS(root);
    }
    
    int next() {
        TreeNode * temp= s.top();
        s.pop();
        DFS(temp->right);
        return temp->val; 
    }
    
    bool hasNext() {
       return  !s.empty();
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
