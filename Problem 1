//Time Complexity : O(n)
// Space Complexity :O(h)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No

class BSTIterator {
public:
    stack<TreeNode*> st;
    
    void dfs(TreeNode* root){
        while(root!=NULL){
            st.push(root);
            root=root->left;
        }
    }
   
    BSTIterator(TreeNode* root) {
        dfs(root);
    }
    
    /** @return the next smallest number */
    int next() {
        int num;
        TreeNode* root= st.top();
        st.pop();
        if(root!=NULL){
          num   = root->val;
        }
        root=root->right;
        
        dfs(root);
        
        return num;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        if(st.empty()==false) return true;
        
        return false;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
