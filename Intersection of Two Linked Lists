#time complexity: O(m+n)
#space complexity: O(1)
#did it run on leetcode: yes
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        curr = headA
        count1 = 0
        count2 = 0
        while curr!=None:
            curr=curr.next
            count1+=1
        curr=headB
        while curr!=None:
            curr=curr.next
            count2+=1
        while count1>count2:
            headA = headA.next
            count1-=1
        while count2>count1:
            headB = headB.next
            count2-=1
        while headA!=headB:
            headA=headA.next
            headB=headB.next
        
        return headA
