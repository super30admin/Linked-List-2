Time: O(h); 'h' is height of the tree
Space: O(n)

class BSTIterator {
	Stack<TreeNode> st;
	public BSTIterator(TreeNode root) {
		st = new Stack<>();
		dfs(root);
	}

	/** @return the next smallest number */
	public int next() {
		TreeNode node = st.pop();
		dfs(node.right);
		return node.val;
	}

	/** @return whether we have a next smallest number */
	public boolean hasNext() {
		return !st.isEmpty();
	}

	private void dfs(TreeNode root)
	{
		while(root!=null)
		{
			st.push(root);
			root = root.left;
		}
	}
}
