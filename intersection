// Time Complexity :O(max(m,n))  
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
while condition

// Your code here along with comments explaining your approach
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        if(headA == null || headB == null)
            return null;
        
        ListNode pointer = headA;
        
        int countA =0, countB =0;
        
         while(pointer != null)
        {
            pointer = pointer.next;
            countA++;
        }
        pointer =headB;
         while(pointer != null)
        {
            pointer = pointer.next;
            countB++;
        }
       
        while(countA > countB)
        {
            headA = headA.next;
            countA--;
        }
        while(countB > countA)
        {
            headB = headB.next;
            countB--;
        }
        
        while(countA == countB)
        {
            if(headA == headB)
                break;
            headA = headA.next;
            headB = headB.next;
        }
        
       
        return headA;
    }
}
