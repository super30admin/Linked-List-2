/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        ListNode l1 = headA;
        ListNode l2 = headB;
        int count1=1,count2=1; //counting length
        while(l1!=null){ //length of first list
            l1=l1.next;
            count1++;
        }
        while(l2!=null){ //length of second list
            l2=l2.next;
            count2++;
        }
        int offset = 0;//diff of the length will be discarded
        if(count2>count1)  //when second list is longer offset will be in second list
        {
            offset = count2-count1;
            l1=headA;l2=headB;
            while(offset> 0){
                l2=l2.next;
                offset= offset-1;
                
            }
        }        
        else{ //offset will be in first list
            offset = count1-count2;
            l1=headA;l2=headB;
            while(offset>0){
                l1=l1.next;
                offset= offset-1;
            }
        }
        
        while(l1!=null){
            if(l1==l2){
              return l1; //intersection pointer
            }
            l1=l1.next;
            l2=l2.next;
        }
        return null;// no intersection result
    }
}

//time : O(n+m)
//space : O(1) ..constant

//ran successfully
