class BSTIterator:
    s=[]
    def dfs(self,root):
        while(root!=None):
            self.s.append(root)
            root=root.left
    def __init__(self, root: Optional[TreeNode]):
        self.s.append(root)
        self.dfs(root)
    def next(self) -> int:
        p=self.s.pop()
        self.dfs(p.right)
        return p.val
        

    def hasNext(self) -> bool:
        if self.s:
            return True
        else:
            return False