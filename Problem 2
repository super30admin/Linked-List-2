//Time Complexity : O(n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No

class Solution {
public:
    ListNode* reverse_list(ListNode* head){
        if(head==NULL || head->next==NULL) return head;
        ListNode* ptr = reverse_list(head->next); 
        ListNode* last = head->next;
        last->next = head;
        head->next = NULL;
        
        return ptr;
    }
    void reorderList(ListNode* head) {
         if(head==NULL || head->next==NULL) return;
        //find the middle of the list
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast!=NULL && fast->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
        }
        cout << slow->val;
        
        //reverse the list from mid to end of list
        fast = reverse_list(slow->next);
        slow->next=NULL;
        slow=head;
        
        //merge the lists
        while(fast!=NULL){
            ListNode* curr = slow->next;
            slow->next = fast;
            fast=fast->next;
            slow->next->next = curr;
            slow=curr;
        }

        
    }
};