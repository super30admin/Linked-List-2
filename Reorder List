/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    //TIME COMPELXITY --> O(n)
    // Space Complexity --> O(1)
public:
    ListNode* reverse(ListNode* head){
        if(head == NULL){
            return NULL;
        }
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* fast = head->next;
        while(fast != NULL){
            curr->next = prev;
            prev = curr;
            curr = fast;
            fast = fast->next;
        }
        curr ->next = prev;
        return curr;
    }
    void reorderList(ListNode* head) {
        if(head == NULL || head->next == NULL){
            return;
        }
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        fast = reverse(slow->next);
        slow->next = NULL;
        slow = head;
        ListNode * dummy = slow->next;
        while(fast!= NULL){
            slow->next = fast;
            fast = fast->next;
            slow->next->next = dummy;
            slow = dummy;
            if(slow == NULL){
                break;
            }
            dummy = dummy->next;
        }
    }
};



















