//https://leetcode.com/problems/reorder-list/
// Time Complexity :O(n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
// two pointers - slow and fast , reverse half mid 

class Solution {
    public void reorderList(ListNode head) {
        if(head == null) return;
        
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast.next != null && fast.next.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        fast = reverse(slow.next);
        //spliting in two portions
        slow.next = null;
        //merge 
        slow = head;
        ListNode temp=null;
        while(fast!=null)
        {
            temp=slow.next;
            slow.next = fast;
            fast = fast.next;
            slow.next.next = temp;
            slow = temp;
        }
    }
    private ListNode reverse(ListNode head)
    {
        if(head == null || head.next == null) return head;
        
        ListNode curr = head;
        ListNode prev = null;
        ListNode fast = head.next;
        
        while(fast !=null)
        {
            curr.next = prev;
            prev= curr;
            curr = fast;
            fast = fast.next;
            
        }
        curr.next = prev;
        return curr;
    }
}