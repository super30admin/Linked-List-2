{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww28600\viewh15060\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
# Definition for singly-linked list.\
# class ListNode:\
#     def __init__(self, x):\
#         self.val = x\
#         self.next = None\
\
class Solution:\
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\
        \
        lenA = 0\
        lenB = 0\
        \
        nodeA = headA\
        nodeB = headB\
        \
        while nodeA:\
            nodeA = nodeA.next\
            lenA += 1\
            \
        while nodeB:\
            nodeB = nodeB.next\
            lenB += 1\
        \
        nodeA = headA\
        nodeB = headB\
        diff = abs(lenA - lenB)\
        \
        if lenA > lenB:\
            while diff > 0:\
                nodeA = nodeA.next\
                diff -= 1\
        else:\
            while diff > 0:\
                nodeB = nodeB.next\
                diff -= 1\
        \
        while nodeA != nodeB:\
            nodeA = nodeA.next\
            nodeB = nodeB.next\
        \
        return nodeA\
            }