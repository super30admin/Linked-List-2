/**
* Time complexity= O(m+n) max of m and n
* Space complexity=O(1)
*/
class Solution {
    public void reorderList(ListNode head) {
        if(head==null || head.next==null) return ;
        //find the mid
        ListNode slow=head;
        ListNode fast=head;
        
        while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        fast=reverse(slow.next);
        slow.next=null;
        slow=head;
            
            while(fast!=null){
                ListNode temp=slow.next;
                slow.next=fast;
                fast=fast.next;
                slow.next.next=temp;
                slow=temp;
            }
    }
    
    private ListNode reverse(ListNode head){
        if(head==null || head.next==null) return head;
        
        ListNode prev=null;
        ListNode current=head;
        ListNode fast=head.next;
        
        while(fast!=null){
            current.next=prev;
            prev=current;
            current=fast;
            fast=fast.next;
        }
        current.next=prev;
        return current;
    }
}
