143. Reorder List

//TC=O(n) SC(1)
class Solution {
    public void reorderList(ListNode head) {
        if(head==null || head.next==null|| head.next.next==null){
            return;
        }
        //find the middle
        ListNode slow=head;
        ListNode fast=head;
        while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        //slow reach the middle
        ListNode secondHalf=reverse(slow.next);
        System.out.print(secondHalf.val);
        slow.next=null;
        ListNode firstHalf=head;
        while(secondHalf!=null){

        ListNode temp1=firstHalf.next;
        ListNode temp2=secondHalf.next;
        firstHalf.next=secondHalf;
        secondHalf.next=temp1;
        firstHalf=temp1;
        secondHalf=temp2;
        }


        
    }
    private ListNode reverse(ListNode head){
        ListNode prev=null;
        ListNode curr=head;
        ListNode fast=head.next;
        while(fast!=null){
            curr.next=prev;
            prev=curr;
            curr=fast;
            fast=fast.next;
        }
        curr.next=prev;
        return curr;
    }
}

