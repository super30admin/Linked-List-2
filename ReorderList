// https://leetcode.com/problems/reorder-list/

// Time Complexity: O(n)
// Space Complexity: O(1)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head.next == null) return;

        ListNode slow = head;
        ListNode fast = head;

        while(fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode head2 = slow.next;
        ListNode prev = null;
        ListNode next = null;

        slow.next = null;
        slow = head;

        //reverse second half
        while(head2 != null) {
            next = head2.next;
            head2.next = prev;
            prev = head2;
            head2 = next;
        }

        while(prev != null) {
            ListNode tmp = head.next;
            head.next = prev;
            prev = prev.next;
            head.next.next = tmp;
            head = tmp;
        }
    }
}