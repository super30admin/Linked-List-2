class Solution {
    public void reorderList(ListNode head) 
    {
        if(head == null || head.next == null) return;
        ListNode slow = head;
        ListNode fast = head;
        
        
        //Step 1 . Find the middle of List
        while(fast.next != null && fast.next.next != null) 
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        
        // Reverse the linkedList from slow pointer as it will be at mid
         fast = reverse(slow.next);
         slow.next = null; 
        slow = head;
        
        //Merge the list
        
        while(fast != null)
        {
            ListNode temp = slow.next;
            slow.next = fast;
            fast = fast.next;
            slow.next.next = temp;
            slow = temp;
            
        }
}
    
    private ListNode reverse(ListNode head)
    {
        ListNode prev = null;
        ListNode curr = head;
        ListNode fast = head.next;
        
        while(fast != null)
        {
            curr.next = prev;
            prev = curr;
            curr = fast;
            fast = fast.next;
        }
        curr.next = prev;
        return curr;

        
    }
}

//Time O(n)
//Space : constant
