{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww28600\viewh15060\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class BSTIterator:\
\
    def __init__(self, root: Optional[TreeNode]):\
        self.stack = []\
        while root:\
            self.stack.append(root)\
            root = root. left\
\
    def next(self) -> int:\
        res = self.stack.pop()\
        cur = res.right\
        while cur:\
            self.stack.append(cur)\
            cur = cur.left            \
        return res.val\
\
    def hasNext(self) -> bool:\
        return self.stack != []\
\
\
# Your BSTIterator object will be instantiated and called as such:\
# obj = BSTIterator(root)\
# param_1 = obj.next()\
# param_2 = obj.hasNext()}